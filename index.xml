<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wrangler</title><link>https://wrangler519.github.io/</link><description>Recent content on Wrangler</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 28 Nov 2018 15:14:39 +1000</lastBuildDate><atom:link href="https://wrangler519.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>How we made it</title><link>https://wrangler519.github.io/docs/how/</link><pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate><guid>https://wrangler519.github.io/docs/how/</guid><description>System diagram: Components list:
Component Name Quantity car chassis 1 servo motor 1 DC motor 2 motor driver 1 joystick 1 sound sensor 1 distance/motion sensor 1 voltage switch 1 Development Attached below is the proposed idea of Wrangler(which is a bit different from the final deliverable). The proposed model is cute and interesting. We were thinking using a motion sensor APDS9960 to control the Wrangler to move in different directions.</description></item><item><title>Troubles we met</title><link>https://wrangler519.github.io/docs/troubles/</link><pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate><guid>https://wrangler519.github.io/docs/troubles/</guid><description>1. Problem 1: Servo motor
Problem: the starting, ending angle of servo motor are not precise. The rotation rate of servo motor is not stable. It frequently clogs when not placed horizontally.
Solution: implement an additional servo motor driver voltage level shifter breakout board that takes in a GPIO PWM and outputs a higher- voltage-protected PWM wave that feeds to the servo motor. With separate power supply and reworked PWM wave GPIO output, the behaviour is now stable.</description></item><item><title>What we learned</title><link>https://wrangler519.github.io/docs/learned/</link><pubDate>Mon, 11 Feb 2019 19:30:08 +1000</pubDate><guid>https://wrangler519.github.io/docs/learned/</guid><description>Method of dealing with multi-file C project based on embedded systems.
Use of Cmake tool to configure and compile files involving multiple libraries.
Real-world embedded system debugging including both hardware and software sections.
Implement hardware-based circuits with software control.</description></item><item><title>About PIO</title><link>https://wrangler519.github.io/docs/specimen/</link><pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate><guid>https://wrangler519.github.io/docs/specimen/</guid><description>PIO was used for the LED(mode indicator) and to drive the APDS9960 distance/motion sensor.
The general steps we programmed the PIO state machine are:
Determine which PIO instance to use(out of 2) PIO pio = pio0; PIO pio = pio1;
Assign instructions into instruction memory with sufficient space uint offset = pio_add_program(pio, &amp;amp;program_name_here)
Find an available state machine uint sm = pio_claim_unused_sm(pio, true); some_kind_of_program_init(pio, sm, offset, PICO_DEFAULT_LED_PIN);
Up to this point, state machine is ready and running.</description></item><item><title>Our Team</title><link>https://wrangler519.github.io/docs/example/</link><pubDate>Mon, 11 Feb 2019 19:27:37 +1000</pubDate><guid>https://wrangler519.github.io/docs/example/</guid><description>Yu Feng https://github.com/skyfall88888
Thea Yu https://github.com/Thea-E</description></item></channel></rss>